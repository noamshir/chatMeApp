{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/screens/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ChatDetails from '../cmp/chat-details/ChatDetails';\nimport ChatContent from '../cmp/chat/ChatContent';\nimport SideBar from '../cmp/sidebar/SideBar';\nimport { ChatContext } from '../context/chatContext';\nimport screenService from '../services/screen.service';\nimport { loadChats } from '../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const [currChat, setChat] = useState();\n  const dispatch = useDispatch();\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(screenService.isMobile(document.body.clientWidth));\n  const [renderConversation, setRenderConversation] = useState(false);\n  const [renderSideBar, setRenderSideBar] = useState(false);\n  useEffect(() => {\n    loadUserChats();\n    const handleWindowResize = window.addEventListener('resize', () => {\n      setIsMobile(screenService.isMobile(document.body.clientWidth));\n    });\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n  useEffect(() => {\n    if (!isMobile) {\n      setRenderConversation(true);\n      setRenderSideBar(true);\n    } else {\n      if (!currChat) {\n        setRenderConversation(false);\n        setRenderSideBar(true);\n      } else {\n        setRenderConversation(true);\n        setRenderSideBar(false);\n      }\n    }\n  }, [isMobile, currChat]);\n\n  const loadUserChats = async () => {\n    dispatch(loadChats());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"main-app-chat  flex\",\n    children: /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n      value: {\n        currChat,\n        setChat,\n        isMobile\n      },\n      children: [(!isMobile || isMobile && renderSideBar) && /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 62\n      }, this), (!isMobile || isMobile && renderConversation) && /*#__PURE__*/_jsxDEV(ChatContent, {\n        chat: currChat,\n        openUserDetails: () => setIsDetailsOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"v78/FBIlUjiG/IkmGU6nWg2lmiA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/screens/Chat.jsx"],"names":["React","useEffect","useState","useDispatch","ChatDetails","ChatContent","SideBar","ChatContext","screenService","loadChats","Chat","currChat","setChat","dispatch","isDetailsOpen","setIsDetailsOpen","isMobile","setIsMobile","document","body","clientWidth","renderConversation","setRenderConversation","renderSideBar","setRenderSideBar","loadUserChats","handleWindowResize","window","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,SAAT,QAA0B,sBAA1B;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBV,QAAQ,EAApC;AACA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAACM,aAAa,CAACQ,QAAd,CAAuBE,QAAQ,CAACC,IAAT,CAAcC,WAArC,CAAD,CAAxC;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CpB,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,KAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,aAAa;AACb,UAAMC,kBAAkB,GAAGC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AAC/DX,MAAAA,WAAW,CAACT,aAAa,CAACQ,QAAd,CAAuBE,QAAQ,CAACC,IAAT,CAAcC,WAArC,CAAD,CAAX;AACH,KAF0B,CAA3B;AAGA,WAAO,MAAM;AACTO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,kBAArC;AACH,KAFD;AAGH,GARQ,EAQN,EARM,CAAT;AAUAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACe,QAAL,EAAe;AACXM,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,KAHD,MAIK;AACD,UAAI,CAACb,QAAL,EAAe;AACXW,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAE,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,OAHD,MAIK;AACDF,QAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH;AACJ;AAEJ,GAhBQ,EAgBN,CAACR,QAAD,EAAWL,QAAX,CAhBM,CAAT;;AAkBA,QAAMc,aAAa,GAAG,YAAY;AAC9BZ,IAAAA,QAAQ,CAACJ,SAAS,EAAV,CAAR;AACH,GAFD;;AAGA,sBACI;AAAS,IAAA,SAAS,EAAC,qBAAnB;AAAA,2BACI,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEE,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBI,QAAAA;AAArB,OAA7B;AAAA,iBACK,CAAC,CAACA,QAAD,IAAaA,QAAQ,IAAIO,aAA1B,kBAA4C,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADjD,EAEK,CAAC,CAACP,QAAD,IAAaA,QAAQ,IAAIK,kBAA1B,kBAAiD,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEV,QAAnB;AAA6B,QAAA,eAAe,EAAE,MAAMI,gBAAgB,CAAC,IAAD;AAApE;AAAA;AAAA;AAAA;AAAA,cAFtD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAhDuBL,I;UAEHP,W;;;KAFGO,I","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport ChatDetails from '../cmp/chat-details/ChatDetails'\nimport ChatContent from '../cmp/chat/ChatContent'\nimport SideBar from '../cmp/sidebar/SideBar'\nimport { ChatContext } from '../context/chatContext'\nimport screenService from '../services/screen.service'\nimport { loadChats } from '../store/chat.action'\n\nexport default function Chat() {\n    const [currChat, setChat] = useState();\n    const dispatch = useDispatch()\n    const [isDetailsOpen, setIsDetailsOpen] = useState(false)\n    const [isMobile, setIsMobile] = useState(screenService.isMobile(document.body.clientWidth))\n    const [renderConversation, setRenderConversation] = useState(false)\n    const [renderSideBar, setRenderSideBar] = useState(false)\n\n    useEffect(() => {\n        loadUserChats();\n        const handleWindowResize = window.addEventListener('resize', () => {\n            setIsMobile(screenService.isMobile(document.body.clientWidth))\n        });\n        return () => {\n            window.removeEventListener('resize', handleWindowResize)\n        };\n    }, [])\n\n    useEffect(() => {\n        if (!isMobile) {\n            setRenderConversation(true)\n            setRenderSideBar(true)\n        }\n        else {\n            if (!currChat) {\n                setRenderConversation(false)\n                setRenderSideBar(true)\n            }\n            else {\n                setRenderConversation(true)\n                setRenderSideBar(false)\n            }\n        }\n\n    }, [isMobile, currChat]);\n\n    const loadUserChats = async () => {\n        dispatch(loadChats());\n    }\n    return (\n        <section className=\"main-app-chat  flex\">\n            <ChatContext.Provider value={{ currChat, setChat, isMobile }}>\n                {(!isMobile || isMobile && renderSideBar) && <SideBar />}\n                {(!isMobile || isMobile && renderConversation) && <ChatContent chat={currChat} openUserDetails={() => setIsDetailsOpen(true)} />}\n                {/* {isDetailsOpen && <ChatDetails close={() => setIsDetailsOpen(false)} />} */}\n            </ChatContext.Provider>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}