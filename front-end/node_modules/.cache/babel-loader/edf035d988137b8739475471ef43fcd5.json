{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatHeader from './ChatHeader';\nimport ChatList from './ChatList';\nimport ChatMsgSend from './ChatMsgSend';\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service';\nimport NoMsg from './NoMsg';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContent(_ref) {\n  _s();\n\n  let {\n    chat\n  } = _ref;\n  const user = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule.user;\n  });\n  const poko = useSelector(_ref3 => {\n    let {\n      chatModule\n    } = _ref3;\n    return chatModule.chats;\n  });\n  console.log({\n    poko\n  });\n  const {\n    currChat,\n    setChat\n  } = useContext(ChatContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setSockets();\n    return () => {\n      setSocketsOff();\n    };\n  }, []);\n\n  const setSockets = () => {\n    socketService.emit(SOCKET_EMIT_CONNECTED, user._id);\n    socketService.on(SOCKET_ON_ADDMSG, onRecivedMsg);\n    socketService.on(SOCKET_ON_ADDCHAT, onAddChat);\n  };\n\n  const setSocketsOff = () => {\n    socketService.off(SOCKET_EMIT_CONNECTED);\n    socketService.off(SOCKET_ON_ADDMSG);\n  };\n\n  const addMsg = txt => {\n    const msg = {\n      txt,\n      from: user,\n      sentAt: Date.now(),\n      viewers: []\n    };\n    const chat = { ...currChat\n    };\n    chat.msgs.push(msg);\n    setChat(chat);\n    const updatedChat = { ...chat\n    };\n    updatedChat.users = [user, chat.user];\n    delete updatedChat.user;\n    const reciverId = chat.user._id;\n    socketService.emit(SOCKET_EMIT_NEWMSG, {\n      updatedChat,\n      reciverId\n    });\n    dispatch(updateChat(updatedChat));\n  };\n\n  const onRecivedMsg = chat => {\n    console.log({\n      chats\n    });\n    console.log({\n      chat\n    });\n    const onUpdatedChat = chats.find(ch => ch._id === chat._id);\n    const currMsgs = onUpdatedChat.msgs;\n    const msgs = chat.msgs.map((msg, idx) => {\n      if (currMsgs.length > idx) {\n        if (currMsgs[idx].viewers.includes(user._id) && !msg.viewers.includes(user._id)) {\n          const updatedMsg = { ...msg\n          };\n          updatedMsg.viewers.push(user._id);\n          return updatedMsg;\n        } else {\n          return msg;\n        }\n      } else {\n        return msg;\n      }\n    });\n    const updatedChat = { ...chat,\n      msgs\n    };\n    console.log({\n      updatedChat\n    });\n    dispatch(socketUpdateChat(updatedChat));\n  };\n\n  const onAddChat = chat => {\n    dispatch(socketAddChat(chat));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"chat flex column\",\n    children: !chat || !chat.msgs ? /*#__PURE__*/_jsxDEV(NoMsg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        user: chat.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n        msgs: chat.msgs,\n        chatId: chat._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatMsgSend, {\n        sendMsg: addMsg,\n        chat: chat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatContent, \"31e49/GiqsXZ8FxFFrw+ZiBgwKc=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ChatContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContent\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx"],"names":["React","useEffect","useContext","useDispatch","useSelector","ChatHeader","ChatList","ChatMsgSend","socketService","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_NEWMSG","SOCKET_ON_ADDCHAT","SOCKET_ON_ADDMSG","NoMsg","ChatContext","socketAddChat","updateChat","socketUpdateChat","ChatContent","chat","user","userModule","poko","chatModule","chats","console","log","currChat","setChat","dispatch","setSockets","setSocketsOff","emit","_id","on","onRecivedMsg","onAddChat","off","addMsg","txt","msg","from","sentAt","Date","now","viewers","msgs","push","updatedChat","users","reciverId","onUpdatedChat","find","ch","currMsgs","map","idx","length","includes","updatedMsg"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatHeader from './ChatHeader'\nimport ChatList from './ChatList'\nimport ChatMsgSend from './ChatMsgSend'\n\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service'\nimport NoMsg from './NoMsg'\nimport { ChatContext } from '../../context/chatContext'\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action'\n\nexport default function ChatContent({ chat }) {\n    const user = useSelector(({ userModule }) => userModule.user);\n    const poko = useSelector(({ chatModule }) => chatModule.chats);\n    console.log({ poko })\n    const { currChat, setChat } = useContext(ChatContext);\n    const dispatch = useDispatch()\n    useEffect(() => {\n        setSockets()\n        return () => {\n            setSocketsOff();\n        }\n    }, [])\n    const setSockets = () => {\n        socketService.emit(SOCKET_EMIT_CONNECTED, user._id)\n        socketService.on(SOCKET_ON_ADDMSG, onRecivedMsg)\n        socketService.on(SOCKET_ON_ADDCHAT, onAddChat)\n    }\n    const setSocketsOff = () => {\n        socketService.off(SOCKET_EMIT_CONNECTED);\n        socketService.off(SOCKET_ON_ADDMSG)\n    }\n    const addMsg = (txt) => {\n        const msg = { txt, from: user, sentAt: Date.now(), viewers: [] };\n        const chat = { ...currChat };\n        chat.msgs.push(msg);\n        setChat(chat);\n        const updatedChat = { ...chat };\n        updatedChat.users = [user, chat.user];\n        delete updatedChat.user;\n        const reciverId = (chat.user._id)\n        socketService.emit(SOCKET_EMIT_NEWMSG, { updatedChat, reciverId });\n        dispatch(updateChat(updatedChat));\n    }\n    const onRecivedMsg = (chat) => {\n        console.log({ chats });\n        console.log({ chat })\n        const onUpdatedChat = chats.find(ch => ch._id === chat._id);\n        const currMsgs = onUpdatedChat.msgs;\n        const msgs = chat.msgs.map((msg, idx) => {\n            if (currMsgs.length > idx) {\n                if (currMsgs[idx].viewers.includes(user._id) && !(msg.viewers.includes(user._id))) {\n                    const updatedMsg = { ...msg };\n                    updatedMsg.viewers.push(user._id);\n                    return updatedMsg;\n                }\n                else {\n                    return msg\n                }\n            }\n            else {\n                return msg;\n            }\n        })\n        const updatedChat = { ...chat, msgs };\n        console.log({ updatedChat });\n        dispatch(socketUpdateChat(updatedChat))\n    }\n    const onAddChat = (chat) => {\n        dispatch(socketAddChat(chat))\n    }\n    return (\n        <section className=\"chat flex column\">\n            {(!chat || !chat.msgs) ? <NoMsg /> :\n                <>\n                    <ChatHeader user={chat.user} />\n                    <ChatList msgs={chat.msgs} chatId={chat._id} />\n                    <ChatMsgSend sendMsg={addMsg} chat={chat} />\n                </>\n            }\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}