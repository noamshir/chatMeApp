{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatHeader from './ChatHeader';\nimport ChatList from './ChatList';\nimport ChatMsgSend from './ChatMsgSend';\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_EMIT_UPDATED_CHAT, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG, SOCKET_ON_UPDATE_CHAT } from '../../services/socket.service';\nimport NoMsg from './NoMsg';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContent(_ref) {\n  _s();\n\n  let {\n    chat,\n    openUserDetails,\n    onReceivedMsg\n  } = _ref;\n  const {\n    user\n  } = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule;\n  });\n  const {\n    chats\n  } = useSelector(_ref3 => {\n    let {\n      chatModule\n    } = _ref3;\n    return chatModule;\n  });\n  const dispatch = useDispatch();\n  const {\n    currChat,\n    setChat,\n    isMobile\n  } = useContext(ChatContext);\n  useEffect(() => {\n    if (isMobile) setTabletViewSocketsON();\n    return () => {\n      setTabletViewSocketsOFF();\n    };\n  }, [isMobile, user, chats, currChat]);\n\n  const setTabletViewSocketsON = () => {\n    socketService.on(SOCKET_ON_ADDMSG, onReceivedMsg);\n    socketService.on(SOCKET_ON_UPDATE_CHAT, onChatUpdated);\n    socketService.on(SOCKET_ON_ADDCHAT, onAddChat);\n    socketService.emit(SOCKET_EMIT_CONNECTED, user._id);\n  };\n\n  const setTabletViewSocketsOFF = () => {\n    socketService.off(SOCKET_ON_ADDMSG);\n    socketService.off(SOCKET_ON_UPDATE_CHAT);\n    socketService.off(SOCKET_ON_ADDCHAT);\n  };\n\n  const addMsg = msg => {\n    const chat = { ...currChat\n    };\n    chat.msgs.push(msg);\n    setChat(chat);\n    const updatedChat = { ...chat\n    };\n    updatedChat.users = [user, chat.user];\n    delete updatedChat.user;\n    const receiverId = chat.user._id;\n    socketService.emit(SOCKET_EMIT_NEWMSG, {\n      updatedChat,\n      receiverId\n    });\n    dispatch(updateChat(updatedChat));\n  };\n\n  const onAddChat = chat => {\n    dispatch(socketAddChat(chat));\n  };\n\n  const onChatUpdated = chat => {\n    dispatch(socketUpdateChat(chat));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"chat flex column\",\n    children: !chat || !chat.msgs ? /*#__PURE__*/_jsxDEV(NoMsg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        user: chat.user,\n        openUserDetails: openUserDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n        msgs: chat.msgs,\n        chatId: chat._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatMsgSend, {\n        sendMsg: addMsg,\n        chat: chat,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatContent, \"l+KkFho5z1DuKI8OTrX2E2V008U=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ChatContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContent\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx"],"names":["React","useEffect","useContext","useDispatch","useSelector","ChatHeader","ChatList","ChatMsgSend","socketService","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_NEWMSG","SOCKET_EMIT_UPDATED_CHAT","SOCKET_ON_ADDCHAT","SOCKET_ON_ADDMSG","SOCKET_ON_UPDATE_CHAT","NoMsg","ChatContext","socketAddChat","updateChat","socketUpdateChat","ChatContent","chat","openUserDetails","onReceivedMsg","user","userModule","chats","chatModule","dispatch","currChat","setChat","isMobile","setTabletViewSocketsON","setTabletViewSocketsOFF","on","onChatUpdated","onAddChat","emit","_id","off","addMsg","msg","msgs","push","updatedChat","users","receiverId"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatHeader from './ChatHeader'\nimport ChatList from './ChatList'\nimport ChatMsgSend from './ChatMsgSend'\n\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_EMIT_UPDATED_CHAT, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG, SOCKET_ON_UPDATE_CHAT } from '../../services/socket.service'\nimport NoMsg from './NoMsg'\nimport { ChatContext } from '../../context/chatContext'\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action'\n\nexport default function ChatContent({ chat, openUserDetails, onReceivedMsg }) {\n\n    const { user } = useSelector(({ userModule }) => userModule);\n    const { chats } = useSelector(({ chatModule }) => chatModule);\n    const dispatch = useDispatch()\n\n    const { currChat, setChat, isMobile } = useContext(ChatContext);\n\n    useEffect(() => {\n        if (isMobile) setTabletViewSocketsON()\n        return () => {\n            setTabletViewSocketsOFF()\n        }\n    }, [isMobile, user, chats, currChat])\n\n    const setTabletViewSocketsON = () => {\n        socketService.on(SOCKET_ON_ADDMSG, onReceivedMsg)\n        socketService.on(SOCKET_ON_UPDATE_CHAT, onChatUpdated)\n        socketService.on(SOCKET_ON_ADDCHAT, onAddChat)\n        socketService.emit(SOCKET_EMIT_CONNECTED, user._id)\n    }\n\n    const setTabletViewSocketsOFF = () => {\n        socketService.off(SOCKET_ON_ADDMSG);\n        socketService.off(SOCKET_ON_UPDATE_CHAT);\n        socketService.off(SOCKET_ON_ADDCHAT);\n    }\n\n    const addMsg = (msg) => {\n        const chat = { ...currChat };\n        chat.msgs.push(msg);\n        setChat(chat);\n        const updatedChat = { ...chat };\n        updatedChat.users = [user, chat.user];\n        delete updatedChat.user;\n        const receiverId = (chat.user._id)\n        socketService.emit(SOCKET_EMIT_NEWMSG, { updatedChat, receiverId });\n        dispatch(updateChat(updatedChat));\n    }\n\n    const onAddChat = (chat) => {\n        dispatch(socketAddChat(chat))\n    }\n\n    const onChatUpdated = (chat) => {\n        dispatch(socketUpdateChat(chat))\n    }\n\n    return (\n        <section className=\"chat flex column\">\n            {(!chat || !chat.msgs) ? <NoMsg /> :\n                <>\n                    <ChatHeader user={chat.user} openUserDetails={openUserDetails} />\n                    <ChatList msgs={chat.msgs} chatId={chat._id} />\n                    <ChatMsgSend sendMsg={addMsg} chat={chat} user={user} />\n                </>\n            }\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}