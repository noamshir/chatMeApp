{"ast":null,"code":"import io from \"socket.io-client\";\nexport const SOCKET_EMIT_USER_OFFLINE = \"user-offline\";\nexport const SOCKET_EMIT_USER_ONLINE = \"user-online\";\nexport const SOCKET_EMIT_USER_WATCH = \"user-watch\";\nexport const SOCKET_EMIT_CONNECTED = \"user-connected\";\nexport const SOCKET_EMIT_LOGOUT = \"unset-user-socket\";\nexport const SOCKET_EMIT_NEWMSG = \"new-message\";\nexport const SOCKET_ON_ADDMSG = \"add-messege\";\nconst baseUrl = process.env.NODE_ENV === \"production\" ? \"\" : \"//localhost:3030\";\nexport const socketService = createSocketService();\nsocketService.setup();\n\nfunction createSocketService() {\n  var socket = null;\n  const socketService = {\n    setup() {\n      socket = io(baseUrl);\n    },\n\n    on(eventName, cb) {\n      socket.on(eventName, cb);\n    },\n\n    leave(room) {\n      socket.leave(room);\n    },\n\n    off(eventName) {\n      let cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!socket) return;\n      if (!cb) socket.removeAllListeners(eventName);else socket.off(eventName, cb);\n    },\n\n    emit(eventName, data) {\n      socket.emit(eventName, data);\n    },\n\n    emitTo(eventName, data, toKey) {\n      socket.to(toKey).emit(eventName, data);\n    },\n\n    terminate() {\n      socket = null;\n    }\n\n  };\n  return socketService;\n}","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/services/socket.service.js"],"names":["io","SOCKET_EMIT_USER_OFFLINE","SOCKET_EMIT_USER_ONLINE","SOCKET_EMIT_USER_WATCH","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_LOGOUT","SOCKET_EMIT_NEWMSG","SOCKET_ON_ADDMSG","baseUrl","process","env","NODE_ENV","socketService","createSocketService","setup","socket","on","eventName","cb","leave","room","off","removeAllListeners","emit","data","emitTo","toKey","to","terminate"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AAEA,OAAO,MAAMC,wBAAwB,GAAG,cAAjC;AACP,OAAO,MAAMC,uBAAuB,GAAG,aAAhC;AACP,OAAO,MAAMC,sBAAsB,GAAG,YAA/B;AACP,OAAO,MAAMC,qBAAqB,GAAG,gBAA9B;AACP,OAAO,MAAMC,kBAAkB,GAAG,mBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,aAA3B;AACP,OAAO,MAAMC,gBAAgB,GAAG,aAAzB;AAEP,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,EAAxC,GAA6C,kBAA7D;AACA,OAAO,MAAMC,aAAa,GAAGC,mBAAmB,EAAzC;AAEPD,aAAa,CAACE,KAAd;;AAEA,SAASD,mBAAT,GAA+B;AAC7B,MAAIE,MAAM,GAAG,IAAb;AACA,QAAMH,aAAa,GAAG;AACpBE,IAAAA,KAAK,GAAG;AACNC,MAAAA,MAAM,GAAGf,EAAE,CAACQ,OAAD,CAAX;AACD,KAHmB;;AAIpBQ,IAAAA,EAAE,CAACC,SAAD,EAAYC,EAAZ,EAAgB;AAChBH,MAAAA,MAAM,CAACC,EAAP,CAAUC,SAAV,EAAqBC,EAArB;AACD,KANmB;;AAOpBC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACVL,MAAAA,MAAM,CAACI,KAAP,CAAaC,IAAb;AACD,KATmB;;AAUpBC,IAAAA,GAAG,CAACJ,SAAD,EAAuB;AAAA,UAAXC,EAAW,uEAAN,IAAM;AACxB,UAAI,CAACH,MAAL,EAAa;AACb,UAAI,CAACG,EAAL,EAASH,MAAM,CAACO,kBAAP,CAA0BL,SAA1B,EAAT,KACKF,MAAM,CAACM,GAAP,CAAWJ,SAAX,EAAsBC,EAAtB;AACN,KAdmB;;AAepBK,IAAAA,IAAI,CAACN,SAAD,EAAYO,IAAZ,EAAkB;AACpBT,MAAAA,MAAM,CAACQ,IAAP,CAAYN,SAAZ,EAAuBO,IAAvB;AACD,KAjBmB;;AAkBpBC,IAAAA,MAAM,CAACR,SAAD,EAAYO,IAAZ,EAAkBE,KAAlB,EAAyB;AAC7BX,MAAAA,MAAM,CAACY,EAAP,CAAUD,KAAV,EAAiBH,IAAjB,CAAsBN,SAAtB,EAAiCO,IAAjC;AACD,KApBmB;;AAqBpBI,IAAAA,SAAS,GAAG;AACVb,MAAAA,MAAM,GAAG,IAAT;AACD;;AAvBmB,GAAtB;AAyBA,SAAOH,aAAP;AACD","sourcesContent":["import io from \"socket.io-client\";\n\nexport const SOCKET_EMIT_USER_OFFLINE = \"user-offline\";\nexport const SOCKET_EMIT_USER_ONLINE = \"user-online\";\nexport const SOCKET_EMIT_USER_WATCH = \"user-watch\";\nexport const SOCKET_EMIT_CONNECTED = \"user-connected\";\nexport const SOCKET_EMIT_LOGOUT = \"unset-user-socket\";\nexport const SOCKET_EMIT_NEWMSG = \"new-message\";\nexport const SOCKET_ON_ADDMSG = \"add-messege\";\n\nconst baseUrl = process.env.NODE_ENV === \"production\" ? \"\" : \"//localhost:3030\";\nexport const socketService = createSocketService();\n\nsocketService.setup();\n\nfunction createSocketService() {\n  var socket = null;\n  const socketService = {\n    setup() {\n      socket = io(baseUrl);\n    },\n    on(eventName, cb) {\n      socket.on(eventName, cb);\n    },\n    leave(room) {\n      socket.leave(room);\n    },\n    off(eventName, cb = null) {\n      if (!socket) return;\n      if (!cb) socket.removeAllListeners(eventName);\n      else socket.off(eventName, cb);\n    },\n    emit(eventName, data) {\n      socket.emit(eventName, data);\n    },\n    emitTo(eventName, data, toKey) {\n      socket.to(toKey).emit(eventName, data);\n    },\n    terminate() {\n      socket = null;\n    },\n  };\n  return socketService;\n}\n"]},"metadata":{},"sourceType":"module"}