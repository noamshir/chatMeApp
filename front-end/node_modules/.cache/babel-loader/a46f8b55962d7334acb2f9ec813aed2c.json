{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/screens/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatDetails from '../cmp/chat-details/ChatDetails';\nimport ChatContent from '../cmp/chat/ChatContent';\nimport SideBar from '../cmp/sidebar/SideBar';\nimport { ChatContext } from '../context/chatContext';\nimport screenService from '../services/screen.service';\nimport { socketService, SOCKET_EMIT_UPDATED_CHAT } from '../services/socket.service';\nimport { utilService } from '../services/util.service';\nimport { loadChats, socketUpdateChat, updateChat } from '../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  const [currChat, setChat] = useState();\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(screenService.isMobile(document.body.clientWidth));\n  const [renderConversation, setRenderConversation] = useState(false);\n  const [renderSideBar, setRenderSideBar] = useState(false);\n  const {\n    chats\n  } = useSelector(_ref => {\n    let {\n      chatModule\n    } = _ref;\n    return chatModule;\n  });\n  const {\n    user\n  } = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule;\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    loadUserChats();\n    const handleWindowResize = window.addEventListener('resize', () => {\n      setIsMobile(screenService.isMobile(document.body.clientWidth));\n    });\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n  useEffect(() => {\n    if (!isMobile) {\n      setRenderConversation(true);\n      setRenderSideBar(true);\n    } else {\n      if (!currChat) {\n        setRenderConversation(false);\n        setRenderSideBar(true);\n      } else {\n        setRenderConversation(true);\n        setRenderSideBar(false);\n      }\n    }\n  }, [isMobile, currChat]);\n\n  const onReceivedMsg = chat => {\n    const onUpdatedChat = chats.find(cChat => cChat._id === chat._id);\n    const currMsgs = onUpdatedChat.msgs;\n    const msgs = chat.msgs.map((msg, idx) => {\n      if (currMsgs.length > idx) {\n        if (currMsgs[idx].viewers.includes(user._id) && !msg.viewers.includes(user._id)) {\n          const updatedMsg = { ...msg\n          };\n          updatedMsg.viewers.push(user._id);\n          return updatedMsg;\n        } else {\n          return msg;\n        }\n      } else {\n        return msg;\n      }\n    });\n    const updatedChat = { ...chat,\n      msgs\n    };\n    dispatch(socketUpdateChat(updatedChat));\n\n    if (updatedChat._id === (currChat === null || currChat === void 0 ? void 0 : currChat._id)) {\n      updatedChat.msgs = utilService.markAllAsRead(msgs, user._id);\n      setChat(updatedChat);\n      socketService.emit(SOCKET_EMIT_UPDATED_CHAT, {\n        updatedChat,\n        user\n      });\n      const chatToUpdate = { ...updatedChat\n      };\n      chatToUpdate.users = [user, updatedChat.user];\n      delete chatToUpdate.user;\n      dispatch(updateChat(chatToUpdate));\n    }\n  };\n\n  const loadUserChats = async () => {\n    dispatch(loadChats());\n  };\n\n  const onChatUpdated = chat => {\n    dispatch(socketUpdateChat(chat));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"main-app-chat  flex\",\n    children: /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n      value: {\n        currChat,\n        setChat,\n        isMobile\n      },\n      children: [(!isMobile || isMobile && renderSideBar) && /*#__PURE__*/_jsxDEV(SideBar, {\n        onReceivedMsg: onReceivedMsg,\n        onChatUpdated: onChatUpdated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 62\n      }, this), (!isMobile || isMobile && renderConversation) && /*#__PURE__*/_jsxDEV(ChatContent, {\n        chat: currChat,\n        openUserDetails: () => setIsDetailsOpen(true),\n        onReceivedMsg: onReceivedMsg,\n        onChatUpdated: onChatUpdated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"uZeugRwhUs2xhI1mW4B+YvrDg7g=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/screens/Chat.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","ChatDetails","ChatContent","SideBar","ChatContext","screenService","socketService","SOCKET_EMIT_UPDATED_CHAT","utilService","loadChats","socketUpdateChat","updateChat","Chat","currChat","setChat","isDetailsOpen","setIsDetailsOpen","isMobile","setIsMobile","document","body","clientWidth","renderConversation","setRenderConversation","renderSideBar","setRenderSideBar","chats","chatModule","user","userModule","dispatch","loadUserChats","handleWindowResize","window","addEventListener","removeEventListener","onReceivedMsg","chat","onUpdatedChat","find","cChat","_id","currMsgs","msgs","map","msg","idx","length","viewers","includes","updatedMsg","push","updatedChat","markAllAsRead","emit","chatToUpdate","users","onChatUpdated"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatDetails from '../cmp/chat-details/ChatDetails'\nimport ChatContent from '../cmp/chat/ChatContent'\nimport SideBar from '../cmp/sidebar/SideBar'\nimport { ChatContext } from '../context/chatContext'\nimport screenService from '../services/screen.service'\nimport { socketService, SOCKET_EMIT_UPDATED_CHAT } from '../services/socket.service'\nimport { utilService } from '../services/util.service'\nimport { loadChats, socketUpdateChat, updateChat } from '../store/chat.action'\n\nexport default function Chat() {\n    const [currChat, setChat] = useState();\n    const [isDetailsOpen, setIsDetailsOpen] = useState(false)\n    const [isMobile, setIsMobile] = useState(screenService.isMobile(document.body.clientWidth))\n    const [renderConversation, setRenderConversation] = useState(false)\n    const [renderSideBar, setRenderSideBar] = useState(false)\n    const { chats } = useSelector(({ chatModule }) => chatModule);\n    const { user } = useSelector(({ userModule }) => userModule);\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        loadUserChats();\n        const handleWindowResize = window.addEventListener('resize', () => {\n            setIsMobile(screenService.isMobile(document.body.clientWidth))\n        });\n        return () => {\n            window.removeEventListener('resize', handleWindowResize)\n        };\n    }, [])\n\n    useEffect(() => {\n        if (!isMobile) {\n            setRenderConversation(true)\n            setRenderSideBar(true)\n        }\n        else {\n            if (!currChat) {\n                setRenderConversation(false)\n                setRenderSideBar(true)\n            }\n            else {\n                setRenderConversation(true)\n                setRenderSideBar(false)\n            }\n        }\n\n    }, [isMobile, currChat]);\n\n    const onReceivedMsg = (chat) => {\n        const onUpdatedChat = chats.find(cChat => cChat._id === chat._id);\n        const currMsgs = onUpdatedChat.msgs;\n        const msgs = chat.msgs.map((msg, idx) => {\n            if (currMsgs.length > idx) {\n                if (currMsgs[idx].viewers.includes(user._id) && !(msg.viewers.includes(user._id))) {\n                    const updatedMsg = { ...msg };\n                    updatedMsg.viewers.push(user._id);\n                    return updatedMsg;\n                }\n                else {\n                    return msg\n                }\n            }\n            else {\n                return msg;\n            }\n        })\n        const updatedChat = { ...chat, msgs };\n        dispatch(socketUpdateChat(updatedChat))\n        if (updatedChat._id === currChat?._id) {\n            updatedChat.msgs = utilService.markAllAsRead(msgs, user._id)\n            setChat(updatedChat);\n            socketService.emit(SOCKET_EMIT_UPDATED_CHAT, { updatedChat, user });\n            const chatToUpdate = { ...updatedChat };\n            chatToUpdate.users = [user, updatedChat.user]\n            delete chatToUpdate.user\n            dispatch(updateChat(chatToUpdate));\n        }\n    }\n\n    const loadUserChats = async () => {\n        dispatch(loadChats());\n    }\n\n    const onChatUpdated = (chat) => {\n        dispatch(socketUpdateChat(chat))\n    }\n\n    return (\n        <section className=\"main-app-chat  flex\">\n            <ChatContext.Provider value={{ currChat, setChat, isMobile }}>\n                {(!isMobile || isMobile && renderSideBar) && <SideBar onReceivedMsg={onReceivedMsg} onChatUpdated={onChatUpdated} />}\n                {(!isMobile || isMobile && renderConversation) && <ChatContent chat={currChat} openUserDetails={() => setIsDetailsOpen(true)} onReceivedMsg={onReceivedMsg} onChatUpdated={onChatUpdated} />}\n                {/* {isDetailsOpen && <ChatDetails close={() => setIsDetailsOpen(false)} />} */}\n            </ChatContext.Provider>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}