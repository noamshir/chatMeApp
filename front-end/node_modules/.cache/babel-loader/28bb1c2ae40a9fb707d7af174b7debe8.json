{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/sidebar/ChatPreview.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketService, SOCKET_EMIT_UPDATED_CHAT, SOCKET_ON_TYPING } from '../../services/socket.service';\nimport { utilService } from '../../services/util.service';\nimport { updateChat } from '../../store/chat.action';\nimport { formatTime } from '../../utils/time';\nimport UserProfileImage from '../profile/UserProfileImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatPreview(_ref) {\n  _s();\n\n  let {\n    chat\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    currChat,\n    setChat\n  } = useContext(ChatContext);\n  const {\n    user\n  } = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule;\n  });\n  const [unreadCount, setUnreadCount] = useState(utilService.getUnreadMsgCount(chat.msgs, user._id));\n  const [isTyping, setIsTyping] = useState(false);\n  const [gTimeout, setGTimeout] = useState(null);\n  const reciver = chat.user;\n  useEffect(() => {\n    setSockets();\n    return () => {\n      clearSockets();\n      setGTimeout(null);\n    };\n  }, []);\n  useEffect(() => {\n    setUnreadCount(utilService.getUnreadMsgCount(chat.msgs, user._id));\n  }, [chat]);\n\n  const setSockets = () => {\n    socketService.on(SOCKET_ON_TYPING, chatId => {\n      if (chat._id === chatId) {\n        setIsTyping(true);\n        setGTimeout(null);\n        setGTimeout(setTimeout(() => {\n          setIsTyping(false);\n        }, 3000));\n      }\n    });\n  };\n\n  const clearSockets = () => {\n    socketService.off(SOCKET_ON_TYPING);\n  };\n\n  const onSetCurrentChat = () => {\n    if (chat.user._id === (currChat === null || currChat === void 0 ? void 0 : currChat.user._id)) return;\n\n    if (unreadCount !== 0) {\n      const updatedMsgs = utilService.markAllAsRead(chat.msgs, user._id);\n      const updatedChat = { ...chat,\n        msgs: updatedMsgs\n      };\n      socketService.emit(SOCKET_EMIT_UPDATED_CHAT, {\n        updatedChat,\n        user\n      });\n      const chatForUpdated = { ...updatedChat\n      };\n      chatForUpdated.users = [user, reciver];\n      delete chatForUpdated.user;\n      setUnreadCount(0);\n      dispatch(updateChat(chatForUpdated));\n    }\n\n    setChat(chat);\n  };\n\n  const msgs = chat === null || chat === void 0 ? void 0 : chat.msgs;\n  const msgsLength = msgs.length;\n  let sub = msgs[0] ? chat.msgs[msgsLength - 1].txt : \"New Chat\";\n  if (!sub) sub = \"Photo\";\n  sub = isTyping ? \"typing...\" : sub;\n  if (sub.length > 10) sub = sub.slice(0, 8) + '...';\n  const activeClass = (currChat === null || currChat === void 0 ? void 0 : currChat._id) === chat._id ? \"active\" : \"\";\n  const timeLastMsgSent = msgsLength > 0 ? formatTime(msgs[msgsLength - 1].sentAt) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onSetCurrentChat,\n    className: `chat-preview flex ${activeClass}`,\n    children: [/*#__PURE__*/_jsxDEV(UserProfileImage, {\n      user: reciver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-preview-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: reciver.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sub\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-preview-container\",\n      children: [timeLastMsgSent && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: timeLastMsgSent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unread-count\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: unreadCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatPreview, \"AsdHVzVFEPiCcDE/NEYLzcTE67k=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ChatPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPreview\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/sidebar/ChatPreview.jsx"],"names":["React","useContext","useState","useEffect","useDispatch","useSelector","ChatContext","socketService","SOCKET_EMIT_UPDATED_CHAT","SOCKET_ON_TYPING","utilService","updateChat","formatTime","UserProfileImage","ChatPreview","chat","dispatch","currChat","setChat","user","userModule","unreadCount","setUnreadCount","getUnreadMsgCount","msgs","_id","isTyping","setIsTyping","gTimeout","setGTimeout","reciver","setSockets","clearSockets","on","chatId","setTimeout","off","onSetCurrentChat","updatedMsgs","markAllAsRead","updatedChat","emit","chatForUpdated","users","msgsLength","length","sub","txt","slice","activeClass","timeLastMsgSent","sentAt","username"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChatContext } from '../../context/chatContext'\nimport { socketService, SOCKET_EMIT_UPDATED_CHAT, SOCKET_ON_TYPING } from '../../services/socket.service';\nimport { utilService } from '../../services/util.service';\nimport { updateChat } from '../../store/chat.action';\nimport { formatTime } from '../../utils/time';\nimport UserProfileImage from '../profile/UserProfileImage'\n\nexport default function ChatPreview({ chat }) {\n    \n    const dispatch = useDispatch();\n    const { currChat, setChat } = useContext(ChatContext);\n    const { user } = useSelector(({ userModule }) => userModule)\n    const [unreadCount, setUnreadCount] = useState(utilService.getUnreadMsgCount(chat.msgs, user._id))\n    const [isTyping, setIsTyping] = useState(false)\n    const [gTimeout, setGTimeout] = useState(null)\n    \n    const reciver = chat.user;\n\n    useEffect(() => {\n        setSockets();\n        return () => {\n            clearSockets();\n            setGTimeout(null)\n        }\n    }, [])\n\n    useEffect(() => {\n        setUnreadCount(utilService.getUnreadMsgCount(chat.msgs, user._id))\n    }, [chat])\n\n    const setSockets = () => {\n        socketService.on(SOCKET_ON_TYPING, (chatId) => {\n            if (chat._id === chatId) {\n                setIsTyping(true);\n                setGTimeout(null)\n                setGTimeout(setTimeout(() => {\n                    setIsTyping(false)\n                }, 3000))\n            }\n        })\n    }\n\n    const clearSockets = () => {\n        socketService.off(SOCKET_ON_TYPING);\n    }\n\n    const onSetCurrentChat = () => {\n        if (chat.user._id === currChat?.user._id) return;\n        if (unreadCount !== 0) {\n            const updatedMsgs = utilService.markAllAsRead(chat.msgs, user._id)\n            const updatedChat = { ...chat, msgs: updatedMsgs };\n            socketService.emit(SOCKET_EMIT_UPDATED_CHAT, { updatedChat, user });\n            const chatForUpdated = { ...updatedChat };\n            chatForUpdated.users = [user, reciver];\n            delete chatForUpdated.user\n            setUnreadCount(0);\n            dispatch(updateChat(chatForUpdated));\n        }\n        setChat(chat);\n    }\n\n    const msgs = chat?.msgs\n    const msgsLength = msgs.length\n    let sub = (msgs[0]) ? chat.msgs[msgsLength - 1].txt : \"New Chat\"\n    if (!sub) sub = \"Photo\";\n    sub = (isTyping) ? \"typing...\" : sub;\n    if (sub.length > 10) sub = sub.slice(0, 8) + '...'\n\n    const activeClass = currChat?._id === chat._id ? \"active\" : \"\";\n    const timeLastMsgSent = (msgsLength > 0) ? formatTime(msgs[msgsLength-1].sentAt) : null\n\n    return (\n        <div onClick={onSetCurrentChat} className={`chat-preview flex ${activeClass}`}>\n            <UserProfileImage user={reciver} />\n            <div className=\"chat-preview-content\">\n                <h1>{reciver.username}</h1>\n                <p>{sub}</p>\n            </div>\n            <div className=\"chat-preview-container\">\n            {timeLastMsgSent && <span>{timeLastMsgSent}</span>}\n            {(unreadCount > 0) && <div className=\"unread-count\">\n                <h1>{unreadCount}</h1>\n            </div>}\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}