{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/sidebar/ChatPreview.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketService, SOCKET_ON_TYPING } from '../../services/socket.service';\nimport { utilService } from '../../services/util.service';\nimport UserProfileImage from '../profile/UserProfileImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatPreview(_ref) {\n  _s();\n\n  let {\n    chat\n  } = _ref;\n  const {\n    currChat,\n    setChat\n  } = useContext(ChatContext);\n  const user = chat.user;\n  const [unreadCount, setUnreadCount] = useState(utilService.getUnreadMsgCount(chat.msgs));\n  const [isTyping, setIsTyping] = useState(false);\n  const [gTimeout, setGTimeout] = useState(null);\n  useEffect(() => {\n    setSockets();\n    return () => {\n      clearSockets();\n    };\n  }, []);\n\n  const setSockets = () => {\n    socketService.on(SOCKET_ON_TYPING, chatId => {\n      if (chat._id === chatId) {\n        setIsTyping(true);\n        setGTimeout(null);\n        setGTimeout(setTimeout(() => {\n          setIsTyping(false);\n        }, 2000));\n      }\n    });\n  };\n\n  const clearSockets = () => {\n    socketService.o;\n  };\n\n  const onSetCurrentChat = () => {\n    if (chat.user._id === (currChat === null || currChat === void 0 ? void 0 : currChat.user._id)) return;\n\n    if (unreadCount !== 0) {\n      setUnreadCount(0);\n    }\n\n    setChat(chat);\n  };\n\n  const sub = chat.msgs[0] ? chat.msgs[chat.msgs.length - 1].txt : \"New Chat\";\n  sub = isTyping ? \"typing...\" : sub;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onSetCurrentChat,\n    className: \"chat-preview flex\",\n    children: [/*#__PURE__*/_jsxDEV(UserProfileImage, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-preview-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sub\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unread-count\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatPreview, \"BEAy0/9Euaa2/SP1r97voKCXV2c=\");\n\n_c = ChatPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPreview\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/sidebar/ChatPreview.jsx"],"names":["React","useContext","useState","useEffect","ChatContext","socketService","SOCKET_ON_TYPING","utilService","UserProfileImage","ChatPreview","chat","currChat","setChat","user","unreadCount","setUnreadCount","getUnreadMsgCount","msgs","isTyping","setIsTyping","gTimeout","setGTimeout","setSockets","clearSockets","on","chatId","_id","setTimeout","o","onSetCurrentChat","sub","length","txt","username"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport { ChatContext } from '../../context/chatContext'\nimport { socketService, SOCKET_ON_TYPING } from '../../services/socket.service';\nimport { utilService } from '../../services/util.service';\nimport UserProfileImage from '../profile/UserProfileImage'\n\nexport default function ChatPreview({ chat }) {\n    const { currChat, setChat } = useContext(ChatContext);\n    const user = chat.user;\n    const [unreadCount, setUnreadCount] = useState(utilService.getUnreadMsgCount(chat.msgs))\n    const [isTyping, setIsTyping] = useState(false)\n    const [gTimeout, setGTimeout] = useState(null)\n\n    useEffect(() => {\n        setSockets();\n        return () => {\n            clearSockets();\n        }\n    }, [])\n\n    const setSockets = () => {\n        socketService.on(SOCKET_ON_TYPING, (chatId) => {\n            if (chat._id === chatId) {\n                setIsTyping(true);\n                setGTimeout(null)\n                setGTimeout(setTimeout(() => {\n                    setIsTyping(false)\n                }, 2000))\n            }\n        })\n    }\n\n    const clearSockets = () => {\n        socketService.o\n    }\n\n\n    const onSetCurrentChat = () => {\n        if (chat.user._id === currChat?.user._id) return;\n        if (unreadCount !== 0) {\n            setUnreadCount(0);\n        }\n        setChat(chat);\n    }\n\n\n    const sub = (chat.msgs[0]) ? chat.msgs[chat.msgs.length - 1].txt : \"New Chat\"\n    sub = (isTyping) ? \"typing...\" : sub;\n    return (\n        <div onClick={onSetCurrentChat} className=\"chat-preview flex\">\n            <UserProfileImage user={user} />\n            <div className=\"chat-preview-content\">\n                <h1>{user.username}</h1>\n                <p>{sub}</p>\n            </div>\n            {(unreadCount > 0) && <div className=\"unread-count\">\n                <h1>{unreadCount}</h1>\n            </div>}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}