{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatHeader from './ChatHeader';\nimport ChatList from './ChatList';\nimport ChatMsgSend from './ChatMsgSend';\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service';\nimport NoMsg from './NoMsg';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContent(_ref) {\n  _s();\n\n  let {\n    chat\n  } = _ref;\n  const {\n    user\n  } = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule;\n  });\n  const {\n    chats\n  } = useSelector(_ref3 => {\n    let {\n      chatModule\n    } = _ref3;\n    return chatModule;\n  });\n  const {\n    currChat,\n    setChat\n  } = useContext(ChatContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setSockets();\n    return () => {\n      setSocketsOff();\n    };\n  }, []);\n  useEffect(() => {\n    return () => {\n      cleanup;\n    };\n  }, [input]);\n\n  const setSockets = () => {\n    console.log({\n      user\n    });\n    socketService.emit(SOCKET_EMIT_CONNECTED, user._id);\n    socketService.on(SOCKET_ON_ADDCHAT, onAddChat);\n  };\n\n  const setSocketsOff = () => {\n    socketService.off(SOCKET_EMIT_CONNECTED);\n    socketService.off(SOCKET_ON_ADDMSG);\n  };\n\n  const addMsg = txt => {\n    const msg = {\n      txt,\n      from: user,\n      sentAt: Date.now(),\n      viewers: [user._id]\n    };\n    const chat = { ...currChat\n    };\n    chat.msgs.push(msg);\n    setChat(chat);\n    const updatedChat = { ...chat\n    };\n    updatedChat.users = [user, chat.user];\n    delete updatedChat.user;\n    const reciverId = chat.user._id;\n    socketService.emit(SOCKET_EMIT_NEWMSG, {\n      updatedChat,\n      reciverId\n    });\n    dispatch(updateChat(updatedChat));\n  };\n\n  const onRecivedMsg = chat => {\n    const onUpdatedChat = chats.find(cChat => cChat._id === chat._id);\n    const currMsgs = onUpdatedChat.msgs;\n    const msgs = chat.msgs.map((msg, idx) => {\n      if (currMsgs.length > idx) {\n        if (currMsgs[idx].viewers.includes(user._id) && !msg.viewers.includes(user._id)) {\n          const updatedMsg = { ...msg\n          };\n          updatedMsg.viewers.push(user._id);\n          return updatedMsg;\n        } else {\n          return msg;\n        }\n      } else {\n        return msg;\n      }\n    });\n    const updatedChat = { ...chat,\n      msgs\n    };\n    console.log({\n      updatedChat\n    });\n    dispatch(socketUpdateChat(updatedChat));\n  };\n\n  const onAddChat = chat => {\n    dispatch(socketAddChat(chat));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"chat flex column\",\n    children: !chat || !chat.msgs ? /*#__PURE__*/_jsxDEV(NoMsg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        user: chat.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n        msgs: chat.msgs,\n        chatId: chat._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatMsgSend, {\n        sendMsg: addMsg,\n        chat: chat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatContent, \"q8e3Wne0RXrUfHNtUrmFFWQv+zk=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ChatContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContent\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx"],"names":["React","useEffect","useContext","useDispatch","useSelector","ChatHeader","ChatList","ChatMsgSend","socketService","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_NEWMSG","SOCKET_ON_ADDCHAT","SOCKET_ON_ADDMSG","NoMsg","ChatContext","socketAddChat","updateChat","socketUpdateChat","ChatContent","chat","user","userModule","chats","chatModule","currChat","setChat","dispatch","setSockets","setSocketsOff","cleanup","input","console","log","emit","_id","on","onAddChat","off","addMsg","txt","msg","from","sentAt","Date","now","viewers","msgs","push","updatedChat","users","reciverId","onRecivedMsg","onUpdatedChat","find","cChat","currMsgs","map","idx","length","includes","updatedMsg"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatHeader from './ChatHeader'\nimport ChatList from './ChatList'\nimport ChatMsgSend from './ChatMsgSend'\n\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service'\nimport NoMsg from './NoMsg'\nimport { ChatContext } from '../../context/chatContext'\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action'\n\nexport default function ChatContent({ chat }) {\n\n    const { user } = useSelector(({ userModule }) => userModule);\n    const { chats } = useSelector(({ chatModule }) => chatModule);\n\n    const { currChat, setChat } = useContext(ChatContext);\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        setSockets()\n        return () => {\n            setSocketsOff();\n        }\n    }, [])\n\n    useEffect(() => {\n        \n        return () => {\n            cleanup\n        }\n    }, [input])\n\n    const setSockets = () => {\n        console.log({ user })\n        socketService.emit(SOCKET_EMIT_CONNECTED, user._id)\n        socketService.on(SOCKET_ON_ADDCHAT, onAddChat)\n    }\n\n    const setSocketsOff = () => {\n        socketService.off(SOCKET_EMIT_CONNECTED);\n        socketService.off(SOCKET_ON_ADDMSG)\n    }\n\n    const addMsg = (txt) => {\n        const msg = { txt, from: user, sentAt: Date.now(), viewers: [user._id] };\n        const chat = { ...currChat };\n        chat.msgs.push(msg);\n        setChat(chat);\n        const updatedChat = { ...chat };\n        updatedChat.users = [user, chat.user];\n        delete updatedChat.user;\n        const reciverId = (chat.user._id)\n        socketService.emit(SOCKET_EMIT_NEWMSG, { updatedChat, reciverId });\n        dispatch(updateChat(updatedChat));\n    }\n\n    const onRecivedMsg = (chat) => {\n        const onUpdatedChat = chats.find(cChat => cChat._id === chat._id);\n        const currMsgs = onUpdatedChat.msgs;\n        const msgs = chat.msgs.map((msg, idx) => {\n            if (currMsgs.length > idx) {\n                if (currMsgs[idx].viewers.includes(user._id) && !(msg.viewers.includes(user._id))) {\n                    const updatedMsg = { ...msg };\n                    updatedMsg.viewers.push(user._id);\n                    return updatedMsg;\n                }\n                else {\n                    return msg\n                }\n            }\n            else {\n                return msg;\n            }\n        })\n        const updatedChat = { ...chat, msgs };\n        console.log({ updatedChat });\n        dispatch(socketUpdateChat(updatedChat))\n    }\n\n    const onAddChat = (chat) => {\n        dispatch(socketAddChat(chat))\n    }\n\n    return (\n        <section className=\"chat flex column\">\n            {(!chat || !chat.msgs) ? <NoMsg /> :\n                <>\n                    <ChatHeader user={chat.user} />\n                    <ChatList msgs={chat.msgs} chatId={chat._id} />\n                    <ChatMsgSend sendMsg={addMsg} chat={chat} />\n                </>\n            }\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}