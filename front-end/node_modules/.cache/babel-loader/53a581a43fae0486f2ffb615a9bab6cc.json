{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatHeader from './ChatHeader';\nimport ChatList from './ChatList';\nimport ChatMsgSend from './ChatMsgSend';\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service';\nimport NoMsg from './NoMsg';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action';\nimport { utilService } from '../../services/util.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContent(_ref) {\n  _s();\n\n  let {\n    chat\n  } = _ref;\n  const {\n    user\n  } = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule;\n  });\n  const {\n    chats\n  } = useSelector(_ref3 => {\n    let {\n      chatModule\n    } = _ref3;\n    return chatModule;\n  });\n  const dispatch = useDispatch();\n  const {\n    currChat,\n    setChat\n  } = useContext(ChatContext);\n  useEffect(() => {\n    setSockets();\n    return () => {\n      setSocketsOff();\n    };\n  }, []);\n  useEffect(() => {\n    socketService.on(SOCKET_ON_ADDMSG, onRecivedMsg);\n    return () => {\n      socketService.off(SOCKET_ON_ADDMSG);\n    };\n  }, [chats]);\n\n  const setSockets = () => {\n    socketService.emit(SOCKET_EMIT_CONNECTED, user._id);\n    socketService.on(SOCKET_ON_ADDCHAT, onAddChat);\n  };\n\n  const setSocketsOff = () => {\n    socketService.off(SOCKET_EMIT_CONNECTED);\n  };\n\n  const addMsg = txt => {\n    const msg = {\n      txt,\n      from: user,\n      sentAt: Date.now(),\n      viewers: [user._id]\n    };\n    const chat = { ...currChat\n    };\n    chat.msgs.push(msg);\n    setChat(chat);\n    const updatedChat = { ...chat\n    };\n    updatedChat.users = [user, chat.user];\n    delete updatedChat.user;\n    const reciverId = chat.user._id;\n    socketService.emit(SOCKET_EMIT_NEWMSG, {\n      updatedChat,\n      reciverId\n    });\n    dispatch(updateChat(updatedChat));\n  };\n\n  const onRecivedMsg = chat => {\n    const onUpdatedChat = chats.find(cChat => cChat._id === chat._id);\n    const currMsgs = onUpdatedChat.msgs;\n    const msgs = chat.msgs.map((msg, idx) => {\n      if (currMsgs.length > idx) {\n        if (currMsgs[idx].viewers.includes(user._id) && !msg.viewers.includes(user._id)) {\n          const updatedMsg = { ...msg\n          };\n          updatedMsg.viewers.push(user._id);\n          return updatedMsg;\n        } else {\n          return msg;\n        }\n      } else {\n        return msg;\n      }\n    });\n    const updatedChat = { ...chat,\n      msgs\n    };\n    dispatch(socketUpdateChat(updatedChat));\n\n    if (updatedChat._id === chat._id) {\n      updatedChat.msgs = utilService.markAllAsRead(msgs, user._id);\n      dispatch(updateChat(updatedChat));\n      setChat(updatedChat);\n      socketService.emit();\n    }\n  };\n\n  const onAddChat = chat => {\n    dispatch(socketAddChat(chat));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"chat flex column\",\n    children: !chat || !chat.msgs ? /*#__PURE__*/_jsxDEV(NoMsg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        user: chat.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n        msgs: chat.msgs,\n        chatId: chat._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatMsgSend, {\n        sendMsg: addMsg,\n        chat: chat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatContent, \"HQ5axNtIPWneIspd4Si6mZPyDQM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ChatContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContent\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx"],"names":["React","useEffect","useContext","useDispatch","useSelector","ChatHeader","ChatList","ChatMsgSend","socketService","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_NEWMSG","SOCKET_ON_ADDCHAT","SOCKET_ON_ADDMSG","NoMsg","ChatContext","socketAddChat","updateChat","socketUpdateChat","utilService","ChatContent","chat","user","userModule","chats","chatModule","dispatch","currChat","setChat","setSockets","setSocketsOff","on","onRecivedMsg","off","emit","_id","onAddChat","addMsg","txt","msg","from","sentAt","Date","now","viewers","msgs","push","updatedChat","users","reciverId","onUpdatedChat","find","cChat","currMsgs","map","idx","length","includes","updatedMsg","markAllAsRead"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatHeader from './ChatHeader'\nimport ChatList from './ChatList'\nimport ChatMsgSend from './ChatMsgSend'\n\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service'\nimport NoMsg from './NoMsg'\nimport { ChatContext } from '../../context/chatContext'\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action'\nimport { utilService } from '../../services/util.service'\n\nexport default function ChatContent({ chat }) {\n\n    const { user } = useSelector(({ userModule }) => userModule);\n    const { chats } = useSelector(({ chatModule }) => chatModule);\n    const dispatch = useDispatch()\n\n    const { currChat, setChat } = useContext(ChatContext);\n\n    useEffect(() => {\n        setSockets()\n        return () => {\n            setSocketsOff();\n        }\n    }, [])\n\n    useEffect(() => {\n        socketService.on(SOCKET_ON_ADDMSG, onRecivedMsg)\n        return () => {\n            socketService.off(SOCKET_ON_ADDMSG)\n        }\n    }, [chats])\n\n    const setSockets = () => {\n        socketService.emit(SOCKET_EMIT_CONNECTED, user._id)\n        socketService.on(SOCKET_ON_ADDCHAT, onAddChat)\n    }\n\n    const setSocketsOff = () => {\n        socketService.off(SOCKET_EMIT_CONNECTED);\n    }\n\n    const addMsg = (txt) => {\n        const msg = { txt, from: user, sentAt: Date.now(), viewers: [user._id] };\n        const chat = { ...currChat };\n        chat.msgs.push(msg);\n        setChat(chat);\n        const updatedChat = { ...chat };\n        updatedChat.users = [user, chat.user];\n        delete updatedChat.user;\n        const reciverId = (chat.user._id)\n        socketService.emit(SOCKET_EMIT_NEWMSG, { updatedChat, reciverId });\n        dispatch(updateChat(updatedChat));\n    }\n\n    const onRecivedMsg = (chat) => {\n        const onUpdatedChat = chats.find(cChat => cChat._id === chat._id);\n        const currMsgs = onUpdatedChat.msgs;\n        const msgs = chat.msgs.map((msg, idx) => {\n            if (currMsgs.length > idx) {\n                if (currMsgs[idx].viewers.includes(user._id) && !(msg.viewers.includes(user._id))) {\n                    const updatedMsg = { ...msg };\n                    updatedMsg.viewers.push(user._id);\n                    return updatedMsg;\n                }\n                else {\n                    return msg\n                }\n            }\n            else {\n                return msg;\n            }\n        })\n        const updatedChat = { ...chat, msgs };\n        dispatch(socketUpdateChat(updatedChat))\n        if (updatedChat._id === chat._id) {\n            updatedChat.msgs = utilService.markAllAsRead(msgs, user._id)\n            dispatch(updateChat(updatedChat));\n            setChat(updatedChat);\n            socketService.emit()\n        }\n    }\n\n    const onAddChat = (chat) => {\n        dispatch(socketAddChat(chat))\n    }\n\n    return (\n        <section className=\"chat flex column\">\n            {(!chat || !chat.msgs) ? <NoMsg /> :\n                <>\n                    <ChatHeader user={chat.user} />\n                    <ChatList msgs={chat.msgs} chatId={chat._id} />\n                    <ChatMsgSend sendMsg={addMsg} chat={chat} />\n                </>\n            }\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}