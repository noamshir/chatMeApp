{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/sidebar/SideBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatList from './ChatList';\nimport Search from './Search';\nimport SideBarHeader from './SideBarHeader';\nimport { logout } from '../../store/user.action';\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_LOGOUT, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG, SOCKET_ON_UPDATE_CHAT } from '../../services/socket.service';\nimport AddChatModal from '../AddChatModal';\nimport { ChatContext } from '../../context/chatContext';\nimport { addChat } from '../../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SideBar(_ref) {\n  _s();\n\n  let {\n    onReceivedMsg,\n    onChatUpdated,\n    onAddChatFromSocket\n  } = _ref;\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const {\n    currChat,\n    setChat,\n    isMobile\n  } = useContext(ChatContext);\n  const user = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule.user;\n  });\n  const chats = useSelector(_ref3 => {\n    let {\n      chatModule\n    } = _ref3;\n    return chatModule.chats;\n  });\n  useEffect(() => {\n    socketService.emit(SOCKET_EMIT_CONNECTED, user._id);\n  }, [user]);\n  useEffect(() => {\n    socketService.on(SOCKET_ON_ADDMSG, onReceivedMsg);\n    socketService.on(SOCKET_ON_UPDATE_CHAT, onChatUpdated);\n    socketService.on(SOCKET_ON_ADDCHAT, onAddChatFromSocket);\n    return () => {\n      socketService.off(SOCKET_ON_ADDMSG);\n      socketService.off(SOCKET_ON_UPDATE_CHAT);\n      socketService.off(SOCKET_ON_ADDCHAT);\n    };\n  }, [isMobile, user, chats, currChat]);\n\n  const onLogout = async () => {\n    await dispatch(logout());\n    socketService.emit(SOCKET_EMIT_LOGOUT, user._id);\n  };\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const onAddNewChat = async chat => {\n    const addedChat = await dispatch(addChat(chat, user));\n    setChat(addedChat);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"side-bar flex column\",\n    children: [/*#__PURE__*/_jsxDEV(SideBarHeader, {\n      isMobile: isMobile,\n      logout: onLogout,\n      toggleAddChatModal: toggleModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), !isMobile && /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n      chats: chats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(AddChatModal, {\n      toggleModal: toggleModal,\n      addChat: onAddNewChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SideBar, \"nBWo1HdR+rH5Cgy40paiFJ1Hcmg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = SideBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SideBar\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/sidebar/SideBar.jsx"],"names":["React","useState","useContext","useEffect","useDispatch","useSelector","ChatList","Search","SideBarHeader","logout","socketService","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_LOGOUT","SOCKET_ON_ADDCHAT","SOCKET_ON_ADDMSG","SOCKET_ON_UPDATE_CHAT","AddChatModal","ChatContext","addChat","SideBar","onReceivedMsg","onChatUpdated","onAddChatFromSocket","dispatch","isModalOpen","setIsModalOpen","currChat","setChat","isMobile","user","userModule","chats","chatModule","emit","_id","on","off","onLogout","toggleModal","onAddNewChat","chat","addedChat"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatList from './ChatList'\nimport Search from './Search'\nimport SideBarHeader from './SideBarHeader'\nimport { logout } from '../../store/user.action'\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_LOGOUT, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG, SOCKET_ON_UPDATE_CHAT } from '../../services/socket.service'\nimport AddChatModal from '../AddChatModal'\nimport { ChatContext } from '../../context/chatContext'\nimport { addChat } from '../../store/chat.action'\n\nexport default function SideBar({ onReceivedMsg, onChatUpdated, onAddChatFromSocket }) {\n    const dispatch = useDispatch()\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { currChat, setChat, isMobile } = useContext(ChatContext);\n    const user = useSelector(({ userModule }) => userModule.user)\n    const chats = useSelector(({ chatModule }) => chatModule.chats)\n\n    useEffect(() => {\n        socketService.emit(SOCKET_EMIT_CONNECTED, user._id)\n    }, [user]);\n\n    useEffect(() => {\n        socketService.on(SOCKET_ON_ADDMSG, onReceivedMsg)\n        socketService.on(SOCKET_ON_UPDATE_CHAT, onChatUpdated)\n        socketService.on(SOCKET_ON_ADDCHAT, onAddChatFromSocket)\n        return () => {\n            socketService.off(SOCKET_ON_ADDMSG)\n            socketService.off(SOCKET_ON_UPDATE_CHAT)\n            socketService.off(SOCKET_ON_ADDCHAT)\n        };\n    }, [isMobile, user, chats, currChat]);\n\n    const onLogout = async () => {\n        await dispatch(logout())\n        socketService.emit(SOCKET_EMIT_LOGOUT, user._id);\n    }\n    const toggleModal = () => {\n        setIsModalOpen(!isModalOpen)\n    }\n    const onAddNewChat = async (chat) => {\n        const addedChat = await dispatch(addChat(chat, user));\n        setChat(addedChat);\n    }\n    return (\n        <section className=\"side-bar flex column\">\n            <SideBarHeader isMobile={isMobile} logout={onLogout} toggleAddChatModal={toggleModal} />\n            {!isMobile && <Search />}\n            <ChatList chats={chats} />\n            {isModalOpen && <AddChatModal toggleModal={toggleModal} addChat={onAddNewChat} />}\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}