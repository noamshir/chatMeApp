{"ast":null,"code":"var _jsxFileName = \"/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChatHeader from './ChatHeader';\nimport ChatList from './ChatList';\nimport ChatMsgSend from './ChatMsgSend';\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service';\nimport NoMsg from './NoMsg';\nimport { ChatContext } from '../../context/chatContext';\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContent(_ref) {\n  _s();\n\n  let {\n    chat\n  } = _ref;\n  const user = useSelector(_ref2 => {\n    let {\n      userModule\n    } = _ref2;\n    return userModule.user;\n  });\n  const {\n    currChat,\n    setChat\n  } = useContext(ChatContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setSockets();\n    return () => {\n      setSocketsOff();\n    };\n  }, []);\n\n  const setSockets = () => {\n    socketService.emit(SOCKET_EMIT_CONNECTED, user._id);\n    socketService.on(SOCKET_ON_ADDMSG, onRecivedMsg);\n    socketService.on(SOCKET_ON_ADDCHAT, onAddChat);\n  };\n\n  const setSocketsOff = () => {\n    socketService.off(SOCKET_EMIT_CONNECTED);\n    socketService.off(SOCKET_ON_ADDMSG);\n  };\n\n  const addMsg = txt => {\n    const msg = {\n      txt,\n      from: user,\n      sentAt: Date.now(),\n      viewers: []\n    };\n    const chat = { ...currChat\n    };\n    chat.msgs.push(msg);\n    setChat(chat);\n    const updatedChat = { ...chat\n    };\n    updatedChat.users = [user, chat.user];\n    delete updatedChat.user;\n    const reciverId = chat.user._id;\n    socketService.emit(SOCKET_EMIT_NEWMSG, {\n      updatedChat,\n      reciverId\n    });\n    dispatch(updateChat(updatedChat));\n  };\n\n  const onRecivedMsg = chat => {\n    const currMsgs = currChat.msgs;\n    const msgs = chat.msgs.map((msg, idx) => {\n      if (currMsgs.length > idx) {\n        if (currMsgs[idx].viewers.includes(user._id) && !msg.viewers.includes(user._id)) {\n          const updatedMsg = { ...msg\n          };\n          updatedMsg.viewers.push();\n        } else {\n          return msg;\n        }\n      } else {\n        return msg;\n      }\n    });\n    dispatch(socketUpdateChat(chat));\n  };\n\n  const onAddChat = chat => {\n    dispatch(socketAddChat(chat));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"chat flex column\",\n    children: !chat || !chat.msgs ? /*#__PURE__*/_jsxDEV(NoMsg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        user: chat.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n        msgs: chat.msgs,\n        chatId: chat._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ChatMsgSend, {\n        sendMsg: addMsg,\n        chat: chat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatContent, \"H3VyOqoPM1TLxIHVaNB6jmPF5Uw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ChatContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContent\");","map":{"version":3,"sources":["/Users/noamshirm/Dropbox/Mac/Desktop/PWA/chatMe/front-end/src/cmp/chat/ChatContent.jsx"],"names":["React","useEffect","useContext","useDispatch","useSelector","ChatHeader","ChatList","ChatMsgSend","socketService","SOCKET_EMIT_CONNECTED","SOCKET_EMIT_NEWMSG","SOCKET_ON_ADDCHAT","SOCKET_ON_ADDMSG","NoMsg","ChatContext","socketAddChat","updateChat","socketUpdateChat","ChatContent","chat","user","userModule","currChat","setChat","dispatch","setSockets","setSocketsOff","emit","_id","on","onRecivedMsg","onAddChat","off","addMsg","txt","msg","from","sentAt","Date","now","viewers","msgs","push","updatedChat","users","reciverId","currMsgs","map","idx","length","includes","updatedMsg"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ChatHeader from './ChatHeader'\nimport ChatList from './ChatList'\nimport ChatMsgSend from './ChatMsgSend'\n\nimport { socketService, SOCKET_EMIT_CONNECTED, SOCKET_EMIT_NEWMSG, SOCKET_ON_ADDCHAT, SOCKET_ON_ADDMSG } from '../../services/socket.service'\nimport NoMsg from './NoMsg'\nimport { ChatContext } from '../../context/chatContext'\nimport { socketAddChat, updateChat, socketUpdateChat } from '../../store/chat.action'\n\nexport default function ChatContent({ chat }) {\n    const user = useSelector(({ userModule }) => userModule.user);\n    const { currChat, setChat } = useContext(ChatContext);\n    const dispatch = useDispatch()\n    useEffect(() => {\n        setSockets()\n        return () => {\n            setSocketsOff();\n        }\n    }, [])\n    const setSockets = () => {\n        socketService.emit(SOCKET_EMIT_CONNECTED, user._id)\n        socketService.on(SOCKET_ON_ADDMSG, onRecivedMsg)\n        socketService.on(SOCKET_ON_ADDCHAT, onAddChat)\n    }\n    const setSocketsOff = () => {\n        socketService.off(SOCKET_EMIT_CONNECTED);\n        socketService.off(SOCKET_ON_ADDMSG)\n    }\n    const addMsg = (txt) => {\n        const msg = { txt, from: user, sentAt: Date.now(), viewers: [] };\n        const chat = { ...currChat };\n        chat.msgs.push(msg);\n        setChat(chat);\n        const updatedChat = { ...chat };\n        updatedChat.users = [user, chat.user];\n        delete updatedChat.user;\n        const reciverId = (chat.user._id)\n        socketService.emit(SOCKET_EMIT_NEWMSG, { updatedChat, reciverId });\n        dispatch(updateChat(updatedChat));\n    }\n    const onRecivedMsg = (chat) => {\n        const currMsgs = currChat.msgs;\n        const msgs = chat.msgs.map((msg, idx) => {\n            if (currMsgs.length > idx) {\n                if (currMsgs[idx].viewers.includes(user._id) && !(msg.viewers.includes(user._id))) {\n              const updatedMsg={...msg};\n              updatedMsg.viewers.push()\n                }\n                else {\n                    return msg\n                }\n            }\n            else {\n                return msg;\n            }\n        })\n        dispatch(socketUpdateChat(chat))\n    }\n    const onAddChat = (chat) => {\n        dispatch(socketAddChat(chat))\n    }\n    return (\n        <section className=\"chat flex column\">\n            {(!chat || !chat.msgs) ? <NoMsg /> :\n                <>\n                    <ChatHeader user={chat.user} />\n                    <ChatList msgs={chat.msgs} chatId={chat._id} />\n                    <ChatMsgSend sendMsg={addMsg} chat={chat} />\n                </>\n            }\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}